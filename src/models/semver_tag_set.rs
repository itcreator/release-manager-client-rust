/* 
 * Release Manager
 *
 * This application generate version for your software.
 *
 * OpenAPI spec version: 0.2.0
 * Contact: vitalleshchyk@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SemverTagSet {
  #[serde(rename = "all")]
  all: Option<Vec<String>>,
  #[serde(rename = "full")]
  full: String,
  #[serde(rename = "minor")]
  minor: Option<String>,
  #[serde(rename = "major")]
  major: Option<String>,
  #[serde(rename = "branch")]
  branch: Option<String>,
  #[serde(rename = "isLatest")]
  is_latest: bool
}

impl SemverTagSet {
  pub fn new(full: String, is_latest: bool) -> SemverTagSet {
    SemverTagSet {
      all: None,
      full: full,
      minor: None,
      major: None,
      branch: None,
      is_latest: is_latest
    }
  }

  pub fn set_all(&mut self, all: Vec<String>) {
    self.all = Some(all);
  }

  pub fn with_all(mut self, all: Vec<String>) -> SemverTagSet {
    self.all = Some(all);
    self
  }

  pub fn all(&self) -> Option<&Vec<String>> {
    self.all.as_ref()
  }

  pub fn reset_all(&mut self) {
    self.all = None;
  }

  pub fn set_full(&mut self, full: String) {
    self.full = full;
  }

  pub fn with_full(mut self, full: String) -> SemverTagSet {
    self.full = full;
    self
  }

  pub fn full(&self) -> &String {
    &self.full
  }


  pub fn set_minor(&mut self, minor: String) {
    self.minor = Some(minor);
  }

  pub fn with_minor(mut self, minor: String) -> SemverTagSet {
    self.minor = Some(minor);
    self
  }

  pub fn minor(&self) -> Option<&String> {
    self.minor.as_ref()
  }

  pub fn reset_minor(&mut self) {
    self.minor = None;
  }

  pub fn set_major(&mut self, major: String) {
    self.major = Some(major);
  }

  pub fn with_major(mut self, major: String) -> SemverTagSet {
    self.major = Some(major);
    self
  }

  pub fn major(&self) -> Option<&String> {
    self.major.as_ref()
  }

  pub fn reset_major(&mut self) {
    self.major = None;
  }

  pub fn set_branch(&mut self, branch: String) {
    self.branch = Some(branch);
  }

  pub fn with_branch(mut self, branch: String) -> SemverTagSet {
    self.branch = Some(branch);
    self
  }

  pub fn branch(&self) -> Option<&String> {
    self.branch.as_ref()
  }

  pub fn reset_branch(&mut self) {
    self.branch = None;
  }

  pub fn set_is_latest(&mut self, is_latest: bool) {
    self.is_latest = is_latest;
  }

  pub fn with_is_latest(mut self, is_latest: bool) -> SemverTagSet {
    self.is_latest = is_latest;
    self
  }

  pub fn is_latest(&self) -> &bool {
    &self.is_latest
  }


}



